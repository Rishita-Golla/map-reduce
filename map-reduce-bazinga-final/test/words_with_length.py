import shutil
import sys
import os
import time

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")
from master import Master
from util import read_conf, read_output_files, get_faults, get_no_fault, verify_result

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src/util")
from file_util import read_file

"""
    Test case to find how many words are there for a certain length.
    for example, 
    input: [Leonard, Sheldon, Amy, Penny, Raj, Bernadette, Howard]
    output: [7:2]  #words of length 6 are: Leonard, Sheldon
            [3:2]  #words of length 3 are: Amy, Raj
            [5:2]  #words of length 5 are: Penny, Howard
            [10:1] #words of length 10 are: Bernadette         
"""


def map_func(line_num, line):
    """
        User defined mapper function
    """
    word_list = line.split(' ')
    length_per_word = []
    for word in word_list:
        length_per_word.append({len(word): word})
    return length_per_word


def reduce_func(length, word_list):
    """
        User defined reducer function
    """
    return length, len(word_list)


def run_map_reduce(input_file, output_dir, n, fault):
    """
        Execute Map Reduce by calling master
    """
    master = Master(input_file, output_dir, n)
    if fault:
        master.execute(map_func, reduce_func, get_faults(n))
    else:
        master.execute(map_func, reduce_func, get_no_fault())
    return output_dir


def get_mapreduce_result(output_dir):
    """
        Read from output files generated by reducers
    """
    output = read_output_files(output_dir)
    length_num_words_mapreduce = {}
    for line in output:
        length, num_words = line.rsplit(':', 1)
        length_num_words_mapreduce[int(length)] = int(num_words)
    return length_num_words_mapreduce


def get_sequential_result(input_file):
    """
        Get output using sequential loops to verify result
    """
    data = read_file(input_file)
    length_num_words_seq = {}
    for index, line in enumerate(data):
        line = line.rstrip('\n')
        word_list = line.split(' ')
        for word in word_list:
            length = len(word)
            if length not in length_num_words_seq:
                length_num_words_seq[length] = 0
            length_num_words_seq[length] += 1
    return length_num_words_seq


if __name__ == '__main__':
    print("----------STARTING WORDS WITH LENGTH-----------")

    try:

        input_file, output_dir, n = read_conf("resources/config_words_with_length.txt")
        if os.path.exists(output_dir):
            shutil.rmtree(output_dir)
        output_seq = get_sequential_result(input_file)

        print("------------------Running Map Reduce for single process (without fault)------------------")
        mr_output_dir = run_map_reduce(input_file, output_dir + '1', 1, False)
        output_mapreduce = get_mapreduce_result(mr_output_dir)
        verify_result(output_mapreduce, output_seq)
        time.sleep(3)
        print("------------------Running Map Reduce for multiple processes (without fault)------------------")
        mr_output_dir = run_map_reduce(input_file, output_dir + '2', n, False)
        output_mapreduce = get_mapreduce_result(mr_output_dir)
        verify_result(output_mapreduce, output_seq)
        time.sleep(3)
        print("------------------Running Map Reduce for multiple processes (with fault)------------------")
        mr_output_dir = run_map_reduce(input_file, output_dir + '3', n, True)
        output_mapreduce = get_mapreduce_result(mr_output_dir)
        verify_result(output_mapreduce, output_seq)

    except ValueError as e:
        print(e)
